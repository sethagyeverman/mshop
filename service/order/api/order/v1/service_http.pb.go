// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             v3.21.11
// source: order/v1/service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOrderCartItemList = "/service.order.v1.Order/CartItemList"
const OperationOrderCreateCartItem = "/service.order.v1.Order/CreateCartItem"
const OperationOrderCreateOrder = "/service.order.v1.Order/CreateOrder"
const OperationOrderDeleteCartItem = "/service.order.v1.Order/DeleteCartItem"
const OperationOrderOrderDetail = "/service.order.v1.Order/OrderDetail"
const OperationOrderOrderList = "/service.order.v1.Order/OrderList"
const OperationOrderUpdateCartItem = "/service.order.v1.Order/UpdateCartItem"
const OperationOrderUpdateOrderStatus = "/service.order.v1.Order/UpdateOrderStatus"

type OrderHTTPServer interface {
	// CartItemList购物车
	// 获取用户的购物车信息
	CartItemList(context.Context, *UserInfo) (*CartItemListResponse, error)
	// CreateCartItem 添加商品到购物车
	CreateCartItem(context.Context, *CartItemRequest) (*ShopCartInfoResponse, error)
	// CreateOrder订单
	// 创建订单
	CreateOrder(context.Context, *OrderRequest) (*OrderInfoResponse, error)
	// DeleteCartItem 删除购物车条目
	DeleteCartItem(context.Context, *CartItemRequest) (*Empty, error)
	// OrderDetail 订单详情
	OrderDetail(context.Context, *OrderRequest) (*OrderInfoDetailResponse, error)
	// OrderList 订单列表
	OrderList(context.Context, *OrderFilterRequest) (*OrderListResponse, error)
	// UpdateCartItem 修改购物车信息
	UpdateCartItem(context.Context, *CartItemRequest) (*Empty, error)
	// UpdateOrderStatus 修改订单状态
	UpdateOrderStatus(context.Context, *OrderStatus) (*Empty, error)
}

func RegisterOrderHTTPServer(s *http.Server, srv OrderHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/cart/{id}", _Order_CartItemList0_HTTP_Handler(srv))
	r.POST("/v1/cart", _Order_CreateCartItem0_HTTP_Handler(srv))
	r.PUT("/v1/cart/{id}", _Order_UpdateCartItem0_HTTP_Handler(srv))
	r.DELETE("/v1/cart/{id}", _Order_DeleteCartItem0_HTTP_Handler(srv))
	r.POST("/v1/order", _Order_CreateOrder0_HTTP_Handler(srv))
	r.GET("/v1/order", _Order_OrderList0_HTTP_Handler(srv))
	r.GET("/v1/order/{id}", _Order_OrderDetail0_HTTP_Handler(srv))
	r.PUT("/v1/order/{id}/status", _Order_UpdateOrderStatus0_HTTP_Handler(srv))
}

func _Order_CartItemList0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserInfo
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderCartItemList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CartItemList(ctx, req.(*UserInfo))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CartItemListResponse)
		return ctx.Result(200, reply)
	}
}

func _Order_CreateCartItem0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CartItemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderCreateCartItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCartItem(ctx, req.(*CartItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ShopCartInfoResponse)
		return ctx.Result(200, reply)
	}
}

func _Order_UpdateCartItem0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CartItemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderUpdateCartItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCartItem(ctx, req.(*CartItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _Order_DeleteCartItem0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CartItemRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderDeleteCartItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCartItem(ctx, req.(*CartItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _Order_CreateOrder0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderCreateOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrder(ctx, req.(*OrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderInfoResponse)
		return ctx.Result(200, reply)
	}
}

func _Order_OrderList0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderFilterRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderOrderList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderList(ctx, req.(*OrderFilterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderListResponse)
		return ctx.Result(200, reply)
	}
}

func _Order_OrderDetail0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderOrderDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderDetail(ctx, req.(*OrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderInfoDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _Order_UpdateOrderStatus0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderStatus
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderUpdateOrderStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateOrderStatus(ctx, req.(*OrderStatus))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

type OrderHTTPClient interface {
	// CartItemList购物车
	// 获取用户的购物车信息
	CartItemList(ctx context.Context, req *UserInfo, opts ...http.CallOption) (rsp *CartItemListResponse, err error)
	// CreateCartItem 添加商品到购物车
	CreateCartItem(ctx context.Context, req *CartItemRequest, opts ...http.CallOption) (rsp *ShopCartInfoResponse, err error)
	// CreateOrder订单
	// 创建订单
	CreateOrder(ctx context.Context, req *OrderRequest, opts ...http.CallOption) (rsp *OrderInfoResponse, err error)
	// DeleteCartItem 删除购物车条目
	DeleteCartItem(ctx context.Context, req *CartItemRequest, opts ...http.CallOption) (rsp *Empty, err error)
	// OrderDetail 订单详情
	OrderDetail(ctx context.Context, req *OrderRequest, opts ...http.CallOption) (rsp *OrderInfoDetailResponse, err error)
	// OrderList 订单列表
	OrderList(ctx context.Context, req *OrderFilterRequest, opts ...http.CallOption) (rsp *OrderListResponse, err error)
	// UpdateCartItem 修改购物车信息
	UpdateCartItem(ctx context.Context, req *CartItemRequest, opts ...http.CallOption) (rsp *Empty, err error)
	// UpdateOrderStatus 修改订单状态
	UpdateOrderStatus(ctx context.Context, req *OrderStatus, opts ...http.CallOption) (rsp *Empty, err error)
}

type OrderHTTPClientImpl struct {
	cc *http.Client
}

func NewOrderHTTPClient(client *http.Client) OrderHTTPClient {
	return &OrderHTTPClientImpl{client}
}

// CartItemList购物车
// 获取用户的购物车信息
func (c *OrderHTTPClientImpl) CartItemList(ctx context.Context, in *UserInfo, opts ...http.CallOption) (*CartItemListResponse, error) {
	var out CartItemListResponse
	pattern := "/v1/cart/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrderCartItemList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// CreateCartItem 添加商品到购物车
func (c *OrderHTTPClientImpl) CreateCartItem(ctx context.Context, in *CartItemRequest, opts ...http.CallOption) (*ShopCartInfoResponse, error) {
	var out ShopCartInfoResponse
	pattern := "/v1/cart"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderCreateCartItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// CreateOrder订单
// 创建订单
func (c *OrderHTTPClientImpl) CreateOrder(ctx context.Context, in *OrderRequest, opts ...http.CallOption) (*OrderInfoResponse, error) {
	var out OrderInfoResponse
	pattern := "/v1/order"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderCreateOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DeleteCartItem 删除购物车条目
func (c *OrderHTTPClientImpl) DeleteCartItem(ctx context.Context, in *CartItemRequest, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/v1/cart/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrderDeleteCartItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// OrderDetail 订单详情
func (c *OrderHTTPClientImpl) OrderDetail(ctx context.Context, in *OrderRequest, opts ...http.CallOption) (*OrderInfoDetailResponse, error) {
	var out OrderInfoDetailResponse
	pattern := "/v1/order/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrderOrderDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// OrderList 订单列表
func (c *OrderHTTPClientImpl) OrderList(ctx context.Context, in *OrderFilterRequest, opts ...http.CallOption) (*OrderListResponse, error) {
	var out OrderListResponse
	pattern := "/v1/order"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrderOrderList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateCartItem 修改购物车信息
func (c *OrderHTTPClientImpl) UpdateCartItem(ctx context.Context, in *CartItemRequest, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/v1/cart/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderUpdateCartItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateOrderStatus 修改订单状态
func (c *OrderHTTPClientImpl) UpdateOrderStatus(ctx context.Context, in *OrderStatus, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/v1/order/{id}/status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderUpdateOrderStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
