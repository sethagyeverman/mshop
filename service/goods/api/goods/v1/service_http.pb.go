// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             v3.21.11
// source: goods/v1/service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGoodsBannerList = "/service.goods.api.goods.v1.Goods/BannerList"
const OperationGoodsBatchGetGoods = "/service.goods.api.goods.v1.Goods/BatchGetGoods"
const OperationGoodsBrandList = "/service.goods.api.goods.v1.Goods/BrandList"
const OperationGoodsCategoryBrandList = "/service.goods.api.goods.v1.Goods/CategoryBrandList"
const OperationGoodsCreateBanner = "/service.goods.api.goods.v1.Goods/CreateBanner"
const OperationGoodsCreateBrand = "/service.goods.api.goods.v1.Goods/CreateBrand"
const OperationGoodsCreateCategory = "/service.goods.api.goods.v1.Goods/CreateCategory"
const OperationGoodsCreateCategoryBrand = "/service.goods.api.goods.v1.Goods/CreateCategoryBrand"
const OperationGoodsCreateGoods = "/service.goods.api.goods.v1.Goods/CreateGoods"
const OperationGoodsDeleteBanner = "/service.goods.api.goods.v1.Goods/DeleteBanner"
const OperationGoodsDeleteBrand = "/service.goods.api.goods.v1.Goods/DeleteBrand"
const OperationGoodsDeleteCategory = "/service.goods.api.goods.v1.Goods/DeleteCategory"
const OperationGoodsDeleteCategoryBrand = "/service.goods.api.goods.v1.Goods/DeleteCategoryBrand"
const OperationGoodsDeleteGoods = "/service.goods.api.goods.v1.Goods/DeleteGoods"
const OperationGoodsGetAllCategorysList = "/service.goods.api.goods.v1.Goods/GetAllCategorysList"
const OperationGoodsGetCategoryBrandList = "/service.goods.api.goods.v1.Goods/GetCategoryBrandList"
const OperationGoodsGetGoodsDetail = "/service.goods.api.goods.v1.Goods/GetGoodsDetail"
const OperationGoodsGetSubCategory = "/service.goods.api.goods.v1.Goods/GetSubCategory"
const OperationGoodsGoodsList = "/service.goods.api.goods.v1.Goods/GoodsList"
const OperationGoodsUpdateBanner = "/service.goods.api.goods.v1.Goods/UpdateBanner"
const OperationGoodsUpdateBrand = "/service.goods.api.goods.v1.Goods/UpdateBrand"
const OperationGoodsUpdateCategory = "/service.goods.api.goods.v1.Goods/UpdateCategory"
const OperationGoodsUpdateCategoryBrand = "/service.goods.api.goods.v1.Goods/UpdateCategoryBrand"
const OperationGoodsUpdateGoods = "/service.goods.api.goods.v1.Goods/UpdateGoods"

type GoodsHTTPServer interface {
	// BannerList 获取轮播图列表
	BannerList(context.Context, *Empty) (*BannerListResponse, error)
	// BatchGetGoods 批量获取商品信息 - 用于订单提交时批量查询商品信息
	BatchGetGoods(context.Context, *BatchGoodsIdInfo) (*GoodsListResponse, error)
	// BrandList 获取品牌列表
	BrandList(context.Context, *BrandFilterRequest) (*BrandListResponse, error)
	// CategoryBrandList 获取品牌分类关联列表
	CategoryBrandList(context.Context, *CategoryBrandFilterRequest) (*CategoryBrandListResponse, error)
	// CreateBanner 创建轮播图
	CreateBanner(context.Context, *BannerRequest) (*BannerResponse, error)
	// CreateBrand 创建品牌
	CreateBrand(context.Context, *BrandRequest) (*BrandInfoResponse, error)
	// CreateCategory 创建分类
	CreateCategory(context.Context, *CategoryInfoRequest) (*CategoryInfoResponse, error)
	// CreateCategoryBrand 创建品牌分类关联
	CreateCategoryBrand(context.Context, *CategoryBrandRequest) (*CategoryBrandResponse, error)
	// CreateGoods 创建商品
	CreateGoods(context.Context, *CreateGoodsInfo) (*GoodsInfoResponse, error)
	// DeleteBanner 删除轮播图
	DeleteBanner(context.Context, *BannerRequest) (*Empty, error)
	// DeleteBrand 删除品牌
	DeleteBrand(context.Context, *BrandRequest) (*Empty, error)
	// DeleteCategory 删除分类
	DeleteCategory(context.Context, *DeleteCategoryRequest) (*Empty, error)
	// DeleteCategoryBrand 删除品牌分类关联
	DeleteCategoryBrand(context.Context, *CategoryBrandRequest) (*Empty, error)
	// DeleteGoods 删除商品
	DeleteGoods(context.Context, *DeleteGoodsInfo) (*Empty, error)
	// GetAllCategorysList 获取所有分类列表
	GetAllCategorysList(context.Context, *Empty) (*CategoryListResponse, error)
	// GetCategoryBrandList 通过分类获取品牌列表
	GetCategoryBrandList(context.Context, *CategoryInfoRequest) (*BrandListResponse, error)
	// GetGoodsDetail 获取商品详情
	GetGoodsDetail(context.Context, *GoodInfoRequest) (*GoodsInfoResponse, error)
	// GetSubCategory 获取子分类
	GetSubCategory(context.Context, *CategoryListRequest) (*SubCategoryListResponse, error)
	// GoodsList 获取商品列表
	GoodsList(context.Context, *GoodsFilterRequest) (*GoodsListResponse, error)
	// UpdateBanner 更新轮播图
	UpdateBanner(context.Context, *BannerRequest) (*Empty, error)
	// UpdateBrand 更新品牌信息
	UpdateBrand(context.Context, *BrandRequest) (*Empty, error)
	// UpdateCategory 更新分类信息
	UpdateCategory(context.Context, *CategoryInfoRequest) (*Empty, error)
	// UpdateCategoryBrand 更新品牌分类关联
	UpdateCategoryBrand(context.Context, *CategoryBrandRequest) (*Empty, error)
	// UpdateGoods 更新商品信息
	UpdateGoods(context.Context, *CreateGoodsInfo) (*Empty, error)
}

func RegisterGoodsHTTPServer(s *http.Server, srv GoodsHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/goods", _Goods_GoodsList0_HTTP_Handler(srv))
	r.POST("/v1/goods/batch", _Goods_BatchGetGoods0_HTTP_Handler(srv))
	r.POST("/v1/goods", _Goods_CreateGoods0_HTTP_Handler(srv))
	r.DELETE("/v1/goods/{id}", _Goods_DeleteGoods0_HTTP_Handler(srv))
	r.PUT("/v1/goods/{id}", _Goods_UpdateGoods0_HTTP_Handler(srv))
	r.GET("/v1/goods/{id}", _Goods_GetGoodsDetail0_HTTP_Handler(srv))
	r.GET("/v1/categories", _Goods_GetAllCategorysList0_HTTP_Handler(srv))
	r.GET("/v1/categories/{id}/sub", _Goods_GetSubCategory0_HTTP_Handler(srv))
	r.POST("/v1/categories", _Goods_CreateCategory0_HTTP_Handler(srv))
	r.DELETE("/v1/categories/{id}", _Goods_DeleteCategory0_HTTP_Handler(srv))
	r.PUT("/v1/categories/{id}", _Goods_UpdateCategory0_HTTP_Handler(srv))
	r.GET("/v1/brands", _Goods_BrandList0_HTTP_Handler(srv))
	r.POST("/v1/brands", _Goods_CreateBrand0_HTTP_Handler(srv))
	r.DELETE("/v1/brands/{id}", _Goods_DeleteBrand0_HTTP_Handler(srv))
	r.PUT("/v1/brands/{id}", _Goods_UpdateBrand0_HTTP_Handler(srv))
	r.GET("/v1/banners", _Goods_BannerList0_HTTP_Handler(srv))
	r.POST("/v1/banners", _Goods_CreateBanner0_HTTP_Handler(srv))
	r.DELETE("/v1/banners/{id}", _Goods_DeleteBanner0_HTTP_Handler(srv))
	r.PUT("/v1/banners/{id}", _Goods_UpdateBanner0_HTTP_Handler(srv))
	r.GET("/v1/category-brands", _Goods_CategoryBrandList0_HTTP_Handler(srv))
	r.GET("/v1/categories/{id}/brands", _Goods_GetCategoryBrandList0_HTTP_Handler(srv))
	r.POST("/v1/category-brands", _Goods_CreateCategoryBrand0_HTTP_Handler(srv))
	r.DELETE("/v1/category-brands/{id}", _Goods_DeleteCategoryBrand0_HTTP_Handler(srv))
	r.PUT("/v1/category-brands/{id}", _Goods_UpdateCategoryBrand0_HTTP_Handler(srv))
}

func _Goods_GoodsList0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GoodsFilterRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsGoodsList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GoodsList(ctx, req.(*GoodsFilterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GoodsListResponse)
		return ctx.Result(200, reply)
	}
}

func _Goods_BatchGetGoods0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchGoodsIdInfo
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsBatchGetGoods)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchGetGoods(ctx, req.(*BatchGoodsIdInfo))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GoodsListResponse)
		return ctx.Result(200, reply)
	}
}

func _Goods_CreateGoods0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateGoodsInfo
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsCreateGoods)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateGoods(ctx, req.(*CreateGoodsInfo))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GoodsInfoResponse)
		return ctx.Result(200, reply)
	}
}

func _Goods_DeleteGoods0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteGoodsInfo
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsDeleteGoods)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteGoods(ctx, req.(*DeleteGoodsInfo))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _Goods_UpdateGoods0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateGoodsInfo
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsUpdateGoods)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateGoods(ctx, req.(*CreateGoodsInfo))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _Goods_GetGoodsDetail0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GoodInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsGetGoodsDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGoodsDetail(ctx, req.(*GoodInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GoodsInfoResponse)
		return ctx.Result(200, reply)
	}
}

func _Goods_GetAllCategorysList0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsGetAllCategorysList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAllCategorysList(ctx, req.(*Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CategoryListResponse)
		return ctx.Result(200, reply)
	}
}

func _Goods_GetSubCategory0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CategoryListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsGetSubCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSubCategory(ctx, req.(*CategoryListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SubCategoryListResponse)
		return ctx.Result(200, reply)
	}
}

func _Goods_CreateCategory0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CategoryInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsCreateCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCategory(ctx, req.(*CategoryInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CategoryInfoResponse)
		return ctx.Result(200, reply)
	}
}

func _Goods_DeleteCategory0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsDeleteCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCategory(ctx, req.(*DeleteCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _Goods_UpdateCategory0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CategoryInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsUpdateCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCategory(ctx, req.(*CategoryInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _Goods_BrandList0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BrandFilterRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsBrandList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BrandList(ctx, req.(*BrandFilterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BrandListResponse)
		return ctx.Result(200, reply)
	}
}

func _Goods_CreateBrand0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BrandRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsCreateBrand)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBrand(ctx, req.(*BrandRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BrandInfoResponse)
		return ctx.Result(200, reply)
	}
}

func _Goods_DeleteBrand0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BrandRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsDeleteBrand)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBrand(ctx, req.(*BrandRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _Goods_UpdateBrand0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BrandRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsUpdateBrand)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBrand(ctx, req.(*BrandRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _Goods_BannerList0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsBannerList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BannerList(ctx, req.(*Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BannerListResponse)
		return ctx.Result(200, reply)
	}
}

func _Goods_CreateBanner0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BannerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsCreateBanner)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBanner(ctx, req.(*BannerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BannerResponse)
		return ctx.Result(200, reply)
	}
}

func _Goods_DeleteBanner0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BannerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsDeleteBanner)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBanner(ctx, req.(*BannerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _Goods_UpdateBanner0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BannerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsUpdateBanner)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBanner(ctx, req.(*BannerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _Goods_CategoryBrandList0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CategoryBrandFilterRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsCategoryBrandList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CategoryBrandList(ctx, req.(*CategoryBrandFilterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CategoryBrandListResponse)
		return ctx.Result(200, reply)
	}
}

func _Goods_GetCategoryBrandList0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CategoryInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsGetCategoryBrandList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCategoryBrandList(ctx, req.(*CategoryInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BrandListResponse)
		return ctx.Result(200, reply)
	}
}

func _Goods_CreateCategoryBrand0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CategoryBrandRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsCreateCategoryBrand)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCategoryBrand(ctx, req.(*CategoryBrandRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CategoryBrandResponse)
		return ctx.Result(200, reply)
	}
}

func _Goods_DeleteCategoryBrand0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CategoryBrandRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsDeleteCategoryBrand)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCategoryBrand(ctx, req.(*CategoryBrandRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _Goods_UpdateCategoryBrand0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CategoryBrandRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsUpdateCategoryBrand)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCategoryBrand(ctx, req.(*CategoryBrandRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

type GoodsHTTPClient interface {
	// BannerList 获取轮播图列表
	BannerList(ctx context.Context, req *Empty, opts ...http.CallOption) (rsp *BannerListResponse, err error)
	// BatchGetGoods 批量获取商品信息 - 用于订单提交时批量查询商品信息
	BatchGetGoods(ctx context.Context, req *BatchGoodsIdInfo, opts ...http.CallOption) (rsp *GoodsListResponse, err error)
	// BrandList 获取品牌列表
	BrandList(ctx context.Context, req *BrandFilterRequest, opts ...http.CallOption) (rsp *BrandListResponse, err error)
	// CategoryBrandList 获取品牌分类关联列表
	CategoryBrandList(ctx context.Context, req *CategoryBrandFilterRequest, opts ...http.CallOption) (rsp *CategoryBrandListResponse, err error)
	// CreateBanner 创建轮播图
	CreateBanner(ctx context.Context, req *BannerRequest, opts ...http.CallOption) (rsp *BannerResponse, err error)
	// CreateBrand 创建品牌
	CreateBrand(ctx context.Context, req *BrandRequest, opts ...http.CallOption) (rsp *BrandInfoResponse, err error)
	// CreateCategory 创建分类
	CreateCategory(ctx context.Context, req *CategoryInfoRequest, opts ...http.CallOption) (rsp *CategoryInfoResponse, err error)
	// CreateCategoryBrand 创建品牌分类关联
	CreateCategoryBrand(ctx context.Context, req *CategoryBrandRequest, opts ...http.CallOption) (rsp *CategoryBrandResponse, err error)
	// CreateGoods 创建商品
	CreateGoods(ctx context.Context, req *CreateGoodsInfo, opts ...http.CallOption) (rsp *GoodsInfoResponse, err error)
	// DeleteBanner 删除轮播图
	DeleteBanner(ctx context.Context, req *BannerRequest, opts ...http.CallOption) (rsp *Empty, err error)
	// DeleteBrand 删除品牌
	DeleteBrand(ctx context.Context, req *BrandRequest, opts ...http.CallOption) (rsp *Empty, err error)
	// DeleteCategory 删除分类
	DeleteCategory(ctx context.Context, req *DeleteCategoryRequest, opts ...http.CallOption) (rsp *Empty, err error)
	// DeleteCategoryBrand 删除品牌分类关联
	DeleteCategoryBrand(ctx context.Context, req *CategoryBrandRequest, opts ...http.CallOption) (rsp *Empty, err error)
	// DeleteGoods 删除商品
	DeleteGoods(ctx context.Context, req *DeleteGoodsInfo, opts ...http.CallOption) (rsp *Empty, err error)
	// GetAllCategorysList 获取所有分类列表
	GetAllCategorysList(ctx context.Context, req *Empty, opts ...http.CallOption) (rsp *CategoryListResponse, err error)
	// GetCategoryBrandList 通过分类获取品牌列表
	GetCategoryBrandList(ctx context.Context, req *CategoryInfoRequest, opts ...http.CallOption) (rsp *BrandListResponse, err error)
	// GetGoodsDetail 获取商品详情
	GetGoodsDetail(ctx context.Context, req *GoodInfoRequest, opts ...http.CallOption) (rsp *GoodsInfoResponse, err error)
	// GetSubCategory 获取子分类
	GetSubCategory(ctx context.Context, req *CategoryListRequest, opts ...http.CallOption) (rsp *SubCategoryListResponse, err error)
	// GoodsList 获取商品列表
	GoodsList(ctx context.Context, req *GoodsFilterRequest, opts ...http.CallOption) (rsp *GoodsListResponse, err error)
	// UpdateBanner 更新轮播图
	UpdateBanner(ctx context.Context, req *BannerRequest, opts ...http.CallOption) (rsp *Empty, err error)
	// UpdateBrand 更新品牌信息
	UpdateBrand(ctx context.Context, req *BrandRequest, opts ...http.CallOption) (rsp *Empty, err error)
	// UpdateCategory 更新分类信息
	UpdateCategory(ctx context.Context, req *CategoryInfoRequest, opts ...http.CallOption) (rsp *Empty, err error)
	// UpdateCategoryBrand 更新品牌分类关联
	UpdateCategoryBrand(ctx context.Context, req *CategoryBrandRequest, opts ...http.CallOption) (rsp *Empty, err error)
	// UpdateGoods 更新商品信息
	UpdateGoods(ctx context.Context, req *CreateGoodsInfo, opts ...http.CallOption) (rsp *Empty, err error)
}

type GoodsHTTPClientImpl struct {
	cc *http.Client
}

func NewGoodsHTTPClient(client *http.Client) GoodsHTTPClient {
	return &GoodsHTTPClientImpl{client}
}

// BannerList 获取轮播图列表
func (c *GoodsHTTPClientImpl) BannerList(ctx context.Context, in *Empty, opts ...http.CallOption) (*BannerListResponse, error) {
	var out BannerListResponse
	pattern := "/v1/banners"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGoodsBannerList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// BatchGetGoods 批量获取商品信息 - 用于订单提交时批量查询商品信息
func (c *GoodsHTTPClientImpl) BatchGetGoods(ctx context.Context, in *BatchGoodsIdInfo, opts ...http.CallOption) (*GoodsListResponse, error) {
	var out GoodsListResponse
	pattern := "/v1/goods/batch"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGoodsBatchGetGoods))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// BrandList 获取品牌列表
func (c *GoodsHTTPClientImpl) BrandList(ctx context.Context, in *BrandFilterRequest, opts ...http.CallOption) (*BrandListResponse, error) {
	var out BrandListResponse
	pattern := "/v1/brands"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGoodsBrandList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// CategoryBrandList 获取品牌分类关联列表
func (c *GoodsHTTPClientImpl) CategoryBrandList(ctx context.Context, in *CategoryBrandFilterRequest, opts ...http.CallOption) (*CategoryBrandListResponse, error) {
	var out CategoryBrandListResponse
	pattern := "/v1/category-brands"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGoodsCategoryBrandList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// CreateBanner 创建轮播图
func (c *GoodsHTTPClientImpl) CreateBanner(ctx context.Context, in *BannerRequest, opts ...http.CallOption) (*BannerResponse, error) {
	var out BannerResponse
	pattern := "/v1/banners"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGoodsCreateBanner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// CreateBrand 创建品牌
func (c *GoodsHTTPClientImpl) CreateBrand(ctx context.Context, in *BrandRequest, opts ...http.CallOption) (*BrandInfoResponse, error) {
	var out BrandInfoResponse
	pattern := "/v1/brands"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGoodsCreateBrand))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// CreateCategory 创建分类
func (c *GoodsHTTPClientImpl) CreateCategory(ctx context.Context, in *CategoryInfoRequest, opts ...http.CallOption) (*CategoryInfoResponse, error) {
	var out CategoryInfoResponse
	pattern := "/v1/categories"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGoodsCreateCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// CreateCategoryBrand 创建品牌分类关联
func (c *GoodsHTTPClientImpl) CreateCategoryBrand(ctx context.Context, in *CategoryBrandRequest, opts ...http.CallOption) (*CategoryBrandResponse, error) {
	var out CategoryBrandResponse
	pattern := "/v1/category-brands"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGoodsCreateCategoryBrand))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// CreateGoods 创建商品
func (c *GoodsHTTPClientImpl) CreateGoods(ctx context.Context, in *CreateGoodsInfo, opts ...http.CallOption) (*GoodsInfoResponse, error) {
	var out GoodsInfoResponse
	pattern := "/v1/goods"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGoodsCreateGoods))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DeleteBanner 删除轮播图
func (c *GoodsHTTPClientImpl) DeleteBanner(ctx context.Context, in *BannerRequest, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/v1/banners/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGoodsDeleteBanner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DeleteBrand 删除品牌
func (c *GoodsHTTPClientImpl) DeleteBrand(ctx context.Context, in *BrandRequest, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/v1/brands/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGoodsDeleteBrand))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DeleteCategory 删除分类
func (c *GoodsHTTPClientImpl) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/v1/categories/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGoodsDeleteCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DeleteCategoryBrand 删除品牌分类关联
func (c *GoodsHTTPClientImpl) DeleteCategoryBrand(ctx context.Context, in *CategoryBrandRequest, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/v1/category-brands/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGoodsDeleteCategoryBrand))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DeleteGoods 删除商品
func (c *GoodsHTTPClientImpl) DeleteGoods(ctx context.Context, in *DeleteGoodsInfo, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/v1/goods/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGoodsDeleteGoods))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetAllCategorysList 获取所有分类列表
func (c *GoodsHTTPClientImpl) GetAllCategorysList(ctx context.Context, in *Empty, opts ...http.CallOption) (*CategoryListResponse, error) {
	var out CategoryListResponse
	pattern := "/v1/categories"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGoodsGetAllCategorysList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetCategoryBrandList 通过分类获取品牌列表
func (c *GoodsHTTPClientImpl) GetCategoryBrandList(ctx context.Context, in *CategoryInfoRequest, opts ...http.CallOption) (*BrandListResponse, error) {
	var out BrandListResponse
	pattern := "/v1/categories/{id}/brands"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGoodsGetCategoryBrandList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetGoodsDetail 获取商品详情
func (c *GoodsHTTPClientImpl) GetGoodsDetail(ctx context.Context, in *GoodInfoRequest, opts ...http.CallOption) (*GoodsInfoResponse, error) {
	var out GoodsInfoResponse
	pattern := "/v1/goods/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGoodsGetGoodsDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetSubCategory 获取子分类
func (c *GoodsHTTPClientImpl) GetSubCategory(ctx context.Context, in *CategoryListRequest, opts ...http.CallOption) (*SubCategoryListResponse, error) {
	var out SubCategoryListResponse
	pattern := "/v1/categories/{id}/sub"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGoodsGetSubCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GoodsList 获取商品列表
func (c *GoodsHTTPClientImpl) GoodsList(ctx context.Context, in *GoodsFilterRequest, opts ...http.CallOption) (*GoodsListResponse, error) {
	var out GoodsListResponse
	pattern := "/v1/goods"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGoodsGoodsList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateBanner 更新轮播图
func (c *GoodsHTTPClientImpl) UpdateBanner(ctx context.Context, in *BannerRequest, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/v1/banners/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGoodsUpdateBanner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateBrand 更新品牌信息
func (c *GoodsHTTPClientImpl) UpdateBrand(ctx context.Context, in *BrandRequest, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/v1/brands/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGoodsUpdateBrand))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateCategory 更新分类信息
func (c *GoodsHTTPClientImpl) UpdateCategory(ctx context.Context, in *CategoryInfoRequest, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/v1/categories/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGoodsUpdateCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateCategoryBrand 更新品牌分类关联
func (c *GoodsHTTPClientImpl) UpdateCategoryBrand(ctx context.Context, in *CategoryBrandRequest, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/v1/category-brands/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGoodsUpdateCategoryBrand))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateGoods 更新商品信息
func (c *GoodsHTTPClientImpl) UpdateGoods(ctx context.Context, in *CreateGoodsInfo, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/v1/goods/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGoodsUpdateGoods))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
