// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             v3.21.11
// source: inventory/v1/service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationInventoryInvDetail = "/service.inventory.v1.Inventory/InvDetail"
const OperationInventoryReback = "/service.inventory.v1.Inventory/Reback"
const OperationInventorySell = "/service.inventory.v1.Inventory/Sell"
const OperationInventorySetInv = "/service.inventory.v1.Inventory/SetInv"

type InventoryHTTPServer interface {
	// InvDetail 获取库存信息
	InvDetail(context.Context, *GoodsInvInfo) (*GoodsInvInfo, error)
	// Reback 库存归还
	Reback(context.Context, *SellInfo) (*Empty, error)
	// Sell 库存扣减
	Sell(context.Context, *SellInfo) (*Empty, error)
	// SetInv 设置库存
	SetInv(context.Context, *GoodsInvInfo) (*Empty, error)
}

func RegisterInventoryHTTPServer(s *http.Server, srv InventoryHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/inventory/set", _Inventory_SetInv0_HTTP_Handler(srv))
	r.GET("/v1/inventory/{goodsId}", _Inventory_InvDetail0_HTTP_Handler(srv))
	r.POST("/v1/inventory/sell", _Inventory_Sell0_HTTP_Handler(srv))
	r.POST("/v1/inventory/reback", _Inventory_Reback0_HTTP_Handler(srv))
}

func _Inventory_SetInv0_HTTP_Handler(srv InventoryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GoodsInvInfo
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInventorySetInv)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetInv(ctx, req.(*GoodsInvInfo))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _Inventory_InvDetail0_HTTP_Handler(srv InventoryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GoodsInvInfo
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInventoryInvDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InvDetail(ctx, req.(*GoodsInvInfo))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GoodsInvInfo)
		return ctx.Result(200, reply)
	}
}

func _Inventory_Sell0_HTTP_Handler(srv InventoryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SellInfo
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInventorySell)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Sell(ctx, req.(*SellInfo))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _Inventory_Reback0_HTTP_Handler(srv InventoryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SellInfo
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInventoryReback)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Reback(ctx, req.(*SellInfo))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

type InventoryHTTPClient interface {
	// InvDetail 获取库存信息
	InvDetail(ctx context.Context, req *GoodsInvInfo, opts ...http.CallOption) (rsp *GoodsInvInfo, err error)
	// Reback 库存归还
	Reback(ctx context.Context, req *SellInfo, opts ...http.CallOption) (rsp *Empty, err error)
	// Sell 库存扣减
	Sell(ctx context.Context, req *SellInfo, opts ...http.CallOption) (rsp *Empty, err error)
	// SetInv 设置库存
	SetInv(ctx context.Context, req *GoodsInvInfo, opts ...http.CallOption) (rsp *Empty, err error)
}

type InventoryHTTPClientImpl struct {
	cc *http.Client
}

func NewInventoryHTTPClient(client *http.Client) InventoryHTTPClient {
	return &InventoryHTTPClientImpl{client}
}

// InvDetail 获取库存信息
func (c *InventoryHTTPClientImpl) InvDetail(ctx context.Context, in *GoodsInvInfo, opts ...http.CallOption) (*GoodsInvInfo, error) {
	var out GoodsInvInfo
	pattern := "/v1/inventory/{goodsId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInventoryInvDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Reback 库存归还
func (c *InventoryHTTPClientImpl) Reback(ctx context.Context, in *SellInfo, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/v1/inventory/reback"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationInventoryReback))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Sell 库存扣减
func (c *InventoryHTTPClientImpl) Sell(ctx context.Context, in *SellInfo, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/v1/inventory/sell"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationInventorySell))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// SetInv 设置库存
func (c *InventoryHTTPClientImpl) SetInv(ctx context.Context, in *GoodsInvInfo, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/v1/inventory/set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationInventorySetInv))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
