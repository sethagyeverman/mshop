// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package errx

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// ============ 通用错误 ============
// 参数错误 - Bad Request
func IsInvalidParams(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_PARAMS.String() && e.Code == 400
}

// ============ 通用错误 ============
// 参数错误 - Bad Request
func ErrorInvalidParams(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_INVALID_PARAMS.String(), fmt.Sprintf(format, args...))
}

// 数据库错误 - Internal Server Error
func IsDatabaseError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DATABASE_ERROR.String() && e.Code == 500
}

// 数据库错误 - Internal Server Error
func ErrorDatabaseError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DATABASE_ERROR.String(), fmt.Sprintf(format, args...))
}

// 记录未找到 - Not Found
func IsRecordNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RECORD_NOT_FOUND.String() && e.Code == 404
}

// 记录未找到 - Not Found
func ErrorRecordNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_RECORD_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 内部服务错误 - Internal Server Error
func IsInternalError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INTERNAL_ERROR.String() && e.Code == 500
}

// 内部服务错误 - Internal Server Error
func ErrorInternalError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INTERNAL_ERROR.String(), fmt.Sprintf(format, args...))
}

// 权限不足 - Forbidden
func IsPermissionDenied(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PERMISSION_DENIED.String() && e.Code == 403
}

// 权限不足 - Forbidden
func ErrorPermissionDenied(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_PERMISSION_DENIED.String(), fmt.Sprintf(format, args...))
}

// 未授权 - Unauthorized
func IsUnauthorized(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNAUTHORIZED.String() && e.Code == 401
}

// 未授权 - Unauthorized
func ErrorUnauthorized(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_UNAUTHORIZED.String(), fmt.Sprintf(format, args...))
}

// ============ 商品错误 ============
// 商品不存在 - Not Found
func IsGoodsNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GOODS_NOT_FOUND.String() && e.Code == 404
}

// ============ 商品错误 ============
// 商品不存在 - Not Found
func ErrorGoodsNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_GOODS_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 商品已下架 - Bad Request
func IsGoodsOffSale(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GOODS_OFF_SALE.String() && e.Code == 400
}

// 商品已下架 - Bad Request
func ErrorGoodsOffSale(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_GOODS_OFF_SALE.String(), fmt.Sprintf(format, args...))
}

// 商品库存不足 - Bad Request
func IsGoodsStockInsufficient(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GOODS_STOCK_INSUFFICIENT.String() && e.Code == 400
}

// 商品库存不足 - Bad Request
func ErrorGoodsStockInsufficient(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_GOODS_STOCK_INSUFFICIENT.String(), fmt.Sprintf(format, args...))
}

// 商品已删除 - Gone
func IsGoodsDeleted(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GOODS_DELETED.String() && e.Code == 410
}

// 商品已删除 - Gone
func ErrorGoodsDeleted(format string, args ...interface{}) *errors.Error {
	return errors.New(410, ErrorReason_GOODS_DELETED.String(), fmt.Sprintf(format, args...))
}

// 商品编号已存在 - Conflict
func IsGoodsSnExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GOODS_SN_EXISTS.String() && e.Code == 409
}

// 商品编号已存在 - Conflict
func ErrorGoodsSnExists(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_GOODS_SN_EXISTS.String(), fmt.Sprintf(format, args...))
}

// 商品名称不能为空 - Bad Request
func IsGoodsNameEmpty(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GOODS_NAME_EMPTY.String() && e.Code == 400
}

// 商品名称不能为空 - Bad Request
func ErrorGoodsNameEmpty(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_GOODS_NAME_EMPTY.String(), fmt.Sprintf(format, args...))
}

// 商品价格无效 - Bad Request
func IsGoodsPriceInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GOODS_PRICE_INVALID.String() && e.Code == 400
}

// 商品价格无效 - Bad Request
func ErrorGoodsPriceInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_GOODS_PRICE_INVALID.String(), fmt.Sprintf(format, args...))
}

// 商品创建失败 - Internal Server Error
func IsGoodsCreateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GOODS_CREATE_FAILED.String() && e.Code == 500
}

// 商品创建失败 - Internal Server Error
func ErrorGoodsCreateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GOODS_CREATE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 商品更新失败 - Internal Server Error
func IsGoodsUpdateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GOODS_UPDATE_FAILED.String() && e.Code == 500
}

// 商品更新失败 - Internal Server Error
func ErrorGoodsUpdateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GOODS_UPDATE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 商品删除失败 - Internal Server Error
func IsGoodsDeleteFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GOODS_DELETE_FAILED.String() && e.Code == 500
}

// 商品删除失败 - Internal Server Error
func ErrorGoodsDeleteFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GOODS_DELETE_FAILED.String(), fmt.Sprintf(format, args...))
}

// ============ 品牌错误 ============
// 品牌不存在 - Not Found
func IsBrandNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BRAND_NOT_FOUND.String() && e.Code == 404
}

// ============ 品牌错误 ============
// 品牌不存在 - Not Found
func ErrorBrandNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_BRAND_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 品牌名称已存在 - Conflict
func IsBrandNameExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BRAND_NAME_EXISTS.String() && e.Code == 409
}

// 品牌名称已存在 - Conflict
func ErrorBrandNameExists(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_BRAND_NAME_EXISTS.String(), fmt.Sprintf(format, args...))
}

// 品牌名称不能为空 - Bad Request
func IsBrandNameEmpty(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BRAND_NAME_EMPTY.String() && e.Code == 400
}

// 品牌名称不能为空 - Bad Request
func ErrorBrandNameEmpty(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_BRAND_NAME_EMPTY.String(), fmt.Sprintf(format, args...))
}

// 品牌创建失败 - Internal Server Error
func IsBrandCreateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BRAND_CREATE_FAILED.String() && e.Code == 500
}

// 品牌创建失败 - Internal Server Error
func ErrorBrandCreateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_BRAND_CREATE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 品牌更新失败 - Internal Server Error
func IsBrandUpdateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BRAND_UPDATE_FAILED.String() && e.Code == 500
}

// 品牌更新失败 - Internal Server Error
func ErrorBrandUpdateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_BRAND_UPDATE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 品牌删除失败（有关联商品）- Conflict
func IsBrandDeleteFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BRAND_DELETE_FAILED.String() && e.Code == 409
}

// 品牌删除失败（有关联商品）- Conflict
func ErrorBrandDeleteFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_BRAND_DELETE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 品牌已删除 - Gone
func IsBrandDeleted(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BRAND_DELETED.String() && e.Code == 410
}

// 品牌已删除 - Gone
func ErrorBrandDeleted(format string, args ...interface{}) *errors.Error {
	return errors.New(410, ErrorReason_BRAND_DELETED.String(), fmt.Sprintf(format, args...))
}

// ============ 分类错误 ============
// 分类不存在 - Not Found
func IsCategoryNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_NOT_FOUND.String() && e.Code == 404
}

// ============ 分类错误 ============
// 分类不存在 - Not Found
func ErrorCategoryNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_CATEGORY_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 分类名称已存在 - Conflict
func IsCategoryNameExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_NAME_EXISTS.String() && e.Code == 409
}

// 分类名称已存在 - Conflict
func ErrorCategoryNameExists(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_CATEGORY_NAME_EXISTS.String(), fmt.Sprintf(format, args...))
}

// 分类名称不能为空 - Bad Request
func IsCategoryNameEmpty(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_NAME_EMPTY.String() && e.Code == 400
}

// 分类名称不能为空 - Bad Request
func ErrorCategoryNameEmpty(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CATEGORY_NAME_EMPTY.String(), fmt.Sprintf(format, args...))
}

// 分类层级错误 - Bad Request
func IsCategoryLevelInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_LEVEL_INVALID.String() && e.Code == 400
}

// 分类层级错误 - Bad Request
func ErrorCategoryLevelInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CATEGORY_LEVEL_INVALID.String(), fmt.Sprintf(format, args...))
}

// 父分类不存在 - Not Found
func IsParentCategoryNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PARENT_CATEGORY_NOT_FOUND.String() && e.Code == 404
}

// 父分类不存在 - Not Found
func ErrorParentCategoryNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_PARENT_CATEGORY_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 分类创建失败 - Internal Server Error
func IsCategoryCreateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_CREATE_FAILED.String() && e.Code == 500
}

// 分类创建失败 - Internal Server Error
func ErrorCategoryCreateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CATEGORY_CREATE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 分类更新失败 - Internal Server Error
func IsCategoryUpdateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_UPDATE_FAILED.String() && e.Code == 500
}

// 分类更新失败 - Internal Server Error
func ErrorCategoryUpdateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CATEGORY_UPDATE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 分类删除失败（有子分类）- Conflict
func IsCategoryHasChildren(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_HAS_CHILDREN.String() && e.Code == 409
}

// 分类删除失败（有子分类）- Conflict
func ErrorCategoryHasChildren(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_CATEGORY_HAS_CHILDREN.String(), fmt.Sprintf(format, args...))
}

// 分类删除失败（有关联商品）- Conflict
func IsCategoryHasGoods(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_HAS_GOODS.String() && e.Code == 409
}

// 分类删除失败（有关联商品）- Conflict
func ErrorCategoryHasGoods(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_CATEGORY_HAS_GOODS.String(), fmt.Sprintf(format, args...))
}

// 分类已删除 - Gone
func IsCategoryDeleted(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_DELETED.String() && e.Code == 410
}

// 分类已删除 - Gone
func ErrorCategoryDeleted(format string, args ...interface{}) *errors.Error {
	return errors.New(410, ErrorReason_CATEGORY_DELETED.String(), fmt.Sprintf(format, args...))
}

// 不能设置为自己的父分类 - Bad Request
func IsCategoryParentInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_PARENT_INVALID.String() && e.Code == 400
}

// 不能设置为自己的父分类 - Bad Request
func ErrorCategoryParentInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CATEGORY_PARENT_INVALID.String(), fmt.Sprintf(format, args...))
}

// ============ 轮播图错误 ============
// 轮播图不存在 - Not Found
func IsBannerNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BANNER_NOT_FOUND.String() && e.Code == 404
}

// ============ 轮播图错误 ============
// 轮播图不存在 - Not Found
func ErrorBannerNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_BANNER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 轮播图图片不能为空 - Bad Request
func IsBannerImageEmpty(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BANNER_IMAGE_EMPTY.String() && e.Code == 400
}

// 轮播图图片不能为空 - Bad Request
func ErrorBannerImageEmpty(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_BANNER_IMAGE_EMPTY.String(), fmt.Sprintf(format, args...))
}

// 轮播图链接不能为空 - Bad Request
func IsBannerUrlEmpty(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BANNER_URL_EMPTY.String() && e.Code == 400
}

// 轮播图链接不能为空 - Bad Request
func ErrorBannerUrlEmpty(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_BANNER_URL_EMPTY.String(), fmt.Sprintf(format, args...))
}

// 轮播图创建失败 - Internal Server Error
func IsBannerCreateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BANNER_CREATE_FAILED.String() && e.Code == 500
}

// 轮播图创建失败 - Internal Server Error
func ErrorBannerCreateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_BANNER_CREATE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 轮播图更新失败 - Internal Server Error
func IsBannerUpdateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BANNER_UPDATE_FAILED.String() && e.Code == 500
}

// 轮播图更新失败 - Internal Server Error
func ErrorBannerUpdateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_BANNER_UPDATE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 轮播图删除失败 - Internal Server Error
func IsBannerDeleteFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BANNER_DELETE_FAILED.String() && e.Code == 500
}

// 轮播图删除失败 - Internal Server Error
func ErrorBannerDeleteFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_BANNER_DELETE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 轮播图已删除 - Gone
func IsBannerDeleted(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BANNER_DELETED.String() && e.Code == 410
}

// 轮播图已删除 - Gone
func ErrorBannerDeleted(format string, args ...interface{}) *errors.Error {
	return errors.New(410, ErrorReason_BANNER_DELETED.String(), fmt.Sprintf(format, args...))
}

// 轮播图索引重复 - Conflict
func IsBannerIndexExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BANNER_INDEX_EXISTS.String() && e.Code == 409
}

// 轮播图索引重复 - Conflict
func ErrorBannerIndexExists(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_BANNER_INDEX_EXISTS.String(), fmt.Sprintf(format, args...))
}

// ============ 分类品牌关联错误 ============
// 分类品牌关联不存在 - Not Found
func IsCategoryBrandNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_BRAND_NOT_FOUND.String() && e.Code == 404
}

// ============ 分类品牌关联错误 ============
// 分类品牌关联不存在 - Not Found
func ErrorCategoryBrandNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_CATEGORY_BRAND_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 分类品牌关联已存在 - Conflict
func IsCategoryBrandExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_BRAND_EXISTS.String() && e.Code == 409
}

// 分类品牌关联已存在 - Conflict
func ErrorCategoryBrandExists(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_CATEGORY_BRAND_EXISTS.String(), fmt.Sprintf(format, args...))
}

// 分类品牌关联创建失败 - Internal Server Error
func IsCategoryBrandCreateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_BRAND_CREATE_FAILED.String() && e.Code == 500
}

// 分类品牌关联创建失败 - Internal Server Error
func ErrorCategoryBrandCreateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CATEGORY_BRAND_CREATE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 分类品牌关联删除失败 - Internal Server Error
func IsCategoryBrandDeleteFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_BRAND_DELETE_FAILED.String() && e.Code == 500
}

// 分类品牌关联删除失败 - Internal Server Error
func ErrorCategoryBrandDeleteFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CATEGORY_BRAND_DELETE_FAILED.String(), fmt.Sprintf(format, args...))
}

// ============ 库存错误 ============
// 库存不存在 - Not Found
func IsInventoryNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVENTORY_NOT_FOUND.String() && e.Code == 404
}

// ============ 库存错误 ============
// 库存不存在 - Not Found
func ErrorInventoryNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_INVENTORY_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 库存不足 - Bad Request
func IsInventoryInsufficient(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVENTORY_INSUFFICIENT.String() && e.Code == 400
}

// 库存不足 - Bad Request
func ErrorInventoryInsufficient(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_INVENTORY_INSUFFICIENT.String(), fmt.Sprintf(format, args...))
}

// 库存扣减失败 - Internal Server Error
func IsInventorySellFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVENTORY_SELL_FAILED.String() && e.Code == 500
}

// 库存扣减失败 - Internal Server Error
func ErrorInventorySellFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVENTORY_SELL_FAILED.String(), fmt.Sprintf(format, args...))
}

// 库存归还失败 - Internal Server Error
func IsInventoryRebackFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVENTORY_REBACK_FAILED.String() && e.Code == 500
}

// 库存归还失败 - Internal Server Error
func ErrorInventoryRebackFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVENTORY_REBACK_FAILED.String(), fmt.Sprintf(format, args...))
}

// 库存设置失败 - Internal Server Error
func IsInventorySetFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVENTORY_SET_FAILED.String() && e.Code == 500
}

// 库存设置失败 - Internal Server Error
func ErrorInventorySetFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVENTORY_SET_FAILED.String(), fmt.Sprintf(format, args...))
}

// 订单号为空 - Bad Request
func IsOrderSnEmpty(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_SN_EMPTY.String() && e.Code == 400
}

// 订单号为空 - Bad Request
func ErrorOrderSnEmpty(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ORDER_SN_EMPTY.String(), fmt.Sprintf(format, args...))
}

// 订单号已存在 - Conflict
func IsOrderSnExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_SN_EXISTS.String() && e.Code == 409
}

// 订单号已存在 - Conflict
func ErrorOrderSnExists(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_ORDER_SN_EXISTS.String(), fmt.Sprintf(format, args...))
}

// 商品ID无效 - Bad Request
func IsGoodsIdInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GOODS_ID_INVALID.String() && e.Code == 400
}

// 商品ID无效 - Bad Request
func ErrorGoodsIdInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_GOODS_ID_INVALID.String(), fmt.Sprintf(format, args...))
}

// 扣减数量无效 - Bad Request
func IsInventoryNumInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVENTORY_NUM_INVALID.String() && e.Code == 400
}

// 扣减数量无效 - Bad Request
func ErrorInventoryNumInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_INVENTORY_NUM_INVALID.String(), fmt.Sprintf(format, args...))
}

// 库存已被锁定 - Conflict
func IsInventoryLocked(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVENTORY_LOCKED.String() && e.Code == 409
}

// 库存已被锁定 - Conflict
func ErrorInventoryLocked(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_INVENTORY_LOCKED.String(), fmt.Sprintf(format, args...))
}

// 库存锁定失败 - Internal Server Error
func IsInventoryLockFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVENTORY_LOCK_FAILED.String() && e.Code == 500
}

// 库存锁定失败 - Internal Server Error
func ErrorInventoryLockFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVENTORY_LOCK_FAILED.String(), fmt.Sprintf(format, args...))
}

// 库存解锁失败 - Internal Server Error
func IsInventoryUnlockFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVENTORY_UNLOCK_FAILED.String() && e.Code == 500
}

// 库存解锁失败 - Internal Server Error
func ErrorInventoryUnlockFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVENTORY_UNLOCK_FAILED.String(), fmt.Sprintf(format, args...))
}

// 库存记录已存在 - Conflict
func IsInventoryAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVENTORY_ALREADY_EXISTS.String() && e.Code == 409
}

// 库存记录已存在 - Conflict
func ErrorInventoryAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_INVENTORY_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

// 批量操作失败 - Internal Server Error
func IsInventoryBatchFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVENTORY_BATCH_FAILED.String() && e.Code == 500
}

// 批量操作失败 - Internal Server Error
func ErrorInventoryBatchFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVENTORY_BATCH_FAILED.String(), fmt.Sprintf(format, args...))
}

// 库存数据不一致 - Conflict
func IsInventoryDataInconsistent(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVENTORY_DATA_INCONSISTENT.String() && e.Code == 409
}

// 库存数据不一致 - Conflict
func ErrorInventoryDataInconsistent(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_INVENTORY_DATA_INCONSISTENT.String(), fmt.Sprintf(format, args...))
}

// 库存初始化失败 - Internal Server Error
func IsInventoryInitFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVENTORY_INIT_FAILED.String() && e.Code == 500
}

// 库存初始化失败 - Internal Server Error
func ErrorInventoryInitFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVENTORY_INIT_FAILED.String(), fmt.Sprintf(format, args...))
}

// 库存同步失败 - Internal Server Error
func IsInventorySyncFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVENTORY_SYNC_FAILED.String() && e.Code == 500
}

// 库存同步失败 - Internal Server Error
func ErrorInventorySyncFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVENTORY_SYNC_FAILED.String(), fmt.Sprintf(format, args...))
}

// 库存回滚失败 - Internal Server Error
func IsInventoryRollbackFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVENTORY_ROLLBACK_FAILED.String() && e.Code == 500
}

// 库存回滚失败 - Internal Server Error
func ErrorInventoryRollbackFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVENTORY_ROLLBACK_FAILED.String(), fmt.Sprintf(format, args...))
}

// ============ 购物车错误 ============
// 购物车不存在 - Not Found
func IsCartNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CART_NOT_FOUND.String() && e.Code == 404
}

// ============ 购物车错误 ============
// 购物车不存在 - Not Found
func ErrorCartNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_CART_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 购物车为空 - Bad Request
func IsCartEmpty(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CART_EMPTY.String() && e.Code == 400
}

// 购物车为空 - Bad Request
func ErrorCartEmpty(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CART_EMPTY.String(), fmt.Sprintf(format, args...))
}

// 购物车商品不存在 - Not Found
func IsCartItemNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CART_ITEM_NOT_FOUND.String() && e.Code == 404
}

// 购物车商品不存在 - Not Found
func ErrorCartItemNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_CART_ITEM_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 购物车添加失败 - Internal Server Error
func IsCartCreateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CART_CREATE_FAILED.String() && e.Code == 500
}

// 购物车添加失败 - Internal Server Error
func ErrorCartCreateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CART_CREATE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 购物车更新失败 - Internal Server Error
func IsCartUpdateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CART_UPDATE_FAILED.String() && e.Code == 500
}

// 购物车更新失败 - Internal Server Error
func ErrorCartUpdateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CART_UPDATE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 购物车删除失败 - Internal Server Error
func IsCartDeleteFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CART_DELETE_FAILED.String() && e.Code == 500
}

// 购物车删除失败 - Internal Server Error
func ErrorCartDeleteFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CART_DELETE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 购物车商品数量无效 - Bad Request
func IsCartItemNumInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CART_ITEM_NUM_INVALID.String() && e.Code == 400
}

// 购物车商品数量无效 - Bad Request
func ErrorCartItemNumInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CART_ITEM_NUM_INVALID.String(), fmt.Sprintf(format, args...))
}

// 购物车商品已存在 - Conflict
func IsCartItemExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CART_ITEM_EXISTS.String() && e.Code == 409
}

// 购物车商品已存在 - Conflict
func ErrorCartItemExists(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_CART_ITEM_EXISTS.String(), fmt.Sprintf(format, args...))
}

// 购物车已过期 - Gone
func IsCartExpired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CART_EXPIRED.String() && e.Code == 410
}

// 购物车已过期 - Gone
func ErrorCartExpired(format string, args ...interface{}) *errors.Error {
	return errors.New(410, ErrorReason_CART_EXPIRED.String(), fmt.Sprintf(format, args...))
}

// 购物车商品超出限制 - Bad Request
func IsCartItemLimitExceeded(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CART_ITEM_LIMIT_EXCEEDED.String() && e.Code == 400
}

// 购物车商品超出限制 - Bad Request
func ErrorCartItemLimitExceeded(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CART_ITEM_LIMIT_EXCEEDED.String(), fmt.Sprintf(format, args...))
}

// ============ 订单错误 ============
// 订单不存在 - Not Found
func IsOrderNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_NOT_FOUND.String() && e.Code == 404
}

// ============ 订单错误 ============
// 订单不存在 - Not Found
func ErrorOrderNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_ORDER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 订单创建失败 - Internal Server Error
func IsOrderCreateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_CREATE_FAILED.String() && e.Code == 500
}

// 订单创建失败 - Internal Server Error
func ErrorOrderCreateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ORDER_CREATE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 订单更新失败 - Internal Server Error
func IsOrderUpdateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_UPDATE_FAILED.String() && e.Code == 500
}

// 订单更新失败 - Internal Server Error
func ErrorOrderUpdateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ORDER_UPDATE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 订单删除失败 - Internal Server Error
func IsOrderDeleteFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_DELETE_FAILED.String() && e.Code == 500
}

// 订单删除失败 - Internal Server Error
func ErrorOrderDeleteFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ORDER_DELETE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 订单状态无效 - Bad Request
func IsOrderStatusInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_STATUS_INVALID.String() && e.Code == 400
}

// 订单状态无效 - Bad Request
func ErrorOrderStatusInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ORDER_STATUS_INVALID.String(), fmt.Sprintf(format, args...))
}

// 订单已取消 - Gone
func IsOrderCancelled(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_CANCELLED.String() && e.Code == 410
}

// 订单已取消 - Gone
func ErrorOrderCancelled(format string, args ...interface{}) *errors.Error {
	return errors.New(410, ErrorReason_ORDER_CANCELLED.String(), fmt.Sprintf(format, args...))
}

// 订单已完成 - Conflict
func IsOrderCompleted(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_COMPLETED.String() && e.Code == 409
}

// 订单已完成 - Conflict
func ErrorOrderCompleted(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_ORDER_COMPLETED.String(), fmt.Sprintf(format, args...))
}

// 订单支付失败 - Internal Server Error
func IsOrderPaymentFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_PAYMENT_FAILED.String() && e.Code == 500
}

// 订单支付失败 - Internal Server Error
func ErrorOrderPaymentFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ORDER_PAYMENT_FAILED.String(), fmt.Sprintf(format, args...))
}

// 订单已支付 - Conflict
func IsOrderAlreadyPaid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_ALREADY_PAID.String() && e.Code == 409
}

// 订单已支付 - Conflict
func ErrorOrderAlreadyPaid(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_ORDER_ALREADY_PAID.String(), fmt.Sprintf(format, args...))
}

// 订单超时 - Request Timeout
func IsOrderTimeout(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_TIMEOUT.String() && e.Code == 408
}

// 订单超时 - Request Timeout
func ErrorOrderTimeout(format string, args ...interface{}) *errors.Error {
	return errors.New(408, ErrorReason_ORDER_TIMEOUT.String(), fmt.Sprintf(format, args...))
}

// 订单金额无效 - Bad Request
func IsOrderAmountInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_AMOUNT_INVALID.String() && e.Code == 400
}

// 订单金额无效 - Bad Request
func ErrorOrderAmountInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ORDER_AMOUNT_INVALID.String(), fmt.Sprintf(format, args...))
}

// 订单商品为空 - Bad Request
func IsOrderGoodsEmpty(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_GOODS_EMPTY.String() && e.Code == 400
}

// 订单商品为空 - Bad Request
func ErrorOrderGoodsEmpty(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ORDER_GOODS_EMPTY.String(), fmt.Sprintf(format, args...))
}

// 订单地址无效 - Bad Request
func IsOrderAddressInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_ADDRESS_INVALID.String() && e.Code == 400
}

// 订单地址无效 - Bad Request
func ErrorOrderAddressInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ORDER_ADDRESS_INVALID.String(), fmt.Sprintf(format, args...))
}

// 订单收货人信息无效 - Bad Request
func IsOrderReceiverInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_RECEIVER_INVALID.String() && e.Code == 400
}

// 订单收货人信息无效 - Bad Request
func ErrorOrderReceiverInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ORDER_RECEIVER_INVALID.String(), fmt.Sprintf(format, args...))
}

// 订单无法取消 - Conflict
func IsOrderCannotCancel(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_CANNOT_CANCEL.String() && e.Code == 409
}

// 订单无法取消 - Conflict
func ErrorOrderCannotCancel(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_ORDER_CANNOT_CANCEL.String(), fmt.Sprintf(format, args...))
}

// 订单无法修改 - Conflict
func IsOrderCannotModify(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_CANNOT_MODIFY.String() && e.Code == 409
}

// 订单无法修改 - Conflict
func ErrorOrderCannotModify(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_ORDER_CANNOT_MODIFY.String(), fmt.Sprintf(format, args...))
}

// 订单已发货 - Conflict
func IsOrderShipped(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_SHIPPED.String() && e.Code == 409
}

// 订单已发货 - Conflict
func ErrorOrderShipped(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_ORDER_SHIPPED.String(), fmt.Sprintf(format, args...))
}

// 订单未支付 - Bad Request
func IsOrderNotPaid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_NOT_PAID.String() && e.Code == 400
}

// 订单未支付 - Bad Request
func ErrorOrderNotPaid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ORDER_NOT_PAID.String(), fmt.Sprintf(format, args...))
}

// 订单备注过长 - Bad Request
func IsOrderRemarkTooLong(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_REMARK_TOO_LONG.String() && e.Code == 400
}

// 订单备注过长 - Bad Request
func ErrorOrderRemarkTooLong(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ORDER_REMARK_TOO_LONG.String(), fmt.Sprintf(format, args...))
}

// 订单提交失败 - Internal Server Error
func IsOrderSubmitFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_SUBMIT_FAILED.String() && e.Code == 500
}

// 订单提交失败 - Internal Server Error
func ErrorOrderSubmitFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ORDER_SUBMIT_FAILED.String(), fmt.Sprintf(format, args...))
}
