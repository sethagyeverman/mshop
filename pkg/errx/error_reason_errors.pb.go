// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package errx

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// ============ 通用错误 ============
// 参数错误 - Bad Request
func IsInvalidParams(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_PARAMS.String() && e.Code == 400
}

// ============ 通用错误 ============
// 参数错误 - Bad Request
func ErrorInvalidParams(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_INVALID_PARAMS.String(), fmt.Sprintf(format, args...))
}

// 数据库错误 - Internal Server Error
func IsDatabaseError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DATABASE_ERROR.String() && e.Code == 500
}

// 数据库错误 - Internal Server Error
func ErrorDatabaseError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DATABASE_ERROR.String(), fmt.Sprintf(format, args...))
}

// 记录未找到 - Not Found
func IsRecordNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RECORD_NOT_FOUND.String() && e.Code == 404
}

// 记录未找到 - Not Found
func ErrorRecordNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_RECORD_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 内部服务错误 - Internal Server Error
func IsInternalError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INTERNAL_ERROR.String() && e.Code == 500
}

// 内部服务错误 - Internal Server Error
func ErrorInternalError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INTERNAL_ERROR.String(), fmt.Sprintf(format, args...))
}

// 权限不足 - Forbidden
func IsPermissionDenied(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PERMISSION_DENIED.String() && e.Code == 403
}

// 权限不足 - Forbidden
func ErrorPermissionDenied(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_PERMISSION_DENIED.String(), fmt.Sprintf(format, args...))
}

// 未授权 - Unauthorized
func IsUnauthorized(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNAUTHORIZED.String() && e.Code == 401
}

// 未授权 - Unauthorized
func ErrorUnauthorized(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_UNAUTHORIZED.String(), fmt.Sprintf(format, args...))
}

// ============ 商品错误 ============
// 商品不存在 - Not Found
func IsGoodsNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GOODS_NOT_FOUND.String() && e.Code == 404
}

// ============ 商品错误 ============
// 商品不存在 - Not Found
func ErrorGoodsNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_GOODS_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 商品已下架 - Bad Request
func IsGoodsOffSale(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GOODS_OFF_SALE.String() && e.Code == 400
}

// 商品已下架 - Bad Request
func ErrorGoodsOffSale(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_GOODS_OFF_SALE.String(), fmt.Sprintf(format, args...))
}

// 商品库存不足 - Bad Request
func IsGoodsStockInsufficient(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GOODS_STOCK_INSUFFICIENT.String() && e.Code == 400
}

// 商品库存不足 - Bad Request
func ErrorGoodsStockInsufficient(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_GOODS_STOCK_INSUFFICIENT.String(), fmt.Sprintf(format, args...))
}

// 商品已删除 - Gone
func IsGoodsDeleted(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GOODS_DELETED.String() && e.Code == 410
}

// 商品已删除 - Gone
func ErrorGoodsDeleted(format string, args ...interface{}) *errors.Error {
	return errors.New(410, ErrorReason_GOODS_DELETED.String(), fmt.Sprintf(format, args...))
}

// 商品编号已存在 - Conflict
func IsGoodsSnExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GOODS_SN_EXISTS.String() && e.Code == 409
}

// 商品编号已存在 - Conflict
func ErrorGoodsSnExists(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_GOODS_SN_EXISTS.String(), fmt.Sprintf(format, args...))
}

// 商品名称不能为空 - Bad Request
func IsGoodsNameEmpty(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GOODS_NAME_EMPTY.String() && e.Code == 400
}

// 商品名称不能为空 - Bad Request
func ErrorGoodsNameEmpty(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_GOODS_NAME_EMPTY.String(), fmt.Sprintf(format, args...))
}

// 商品价格无效 - Bad Request
func IsGoodsPriceInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GOODS_PRICE_INVALID.String() && e.Code == 400
}

// 商品价格无效 - Bad Request
func ErrorGoodsPriceInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_GOODS_PRICE_INVALID.String(), fmt.Sprintf(format, args...))
}

// 商品创建失败 - Internal Server Error
func IsGoodsCreateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GOODS_CREATE_FAILED.String() && e.Code == 500
}

// 商品创建失败 - Internal Server Error
func ErrorGoodsCreateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GOODS_CREATE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 商品更新失败 - Internal Server Error
func IsGoodsUpdateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GOODS_UPDATE_FAILED.String() && e.Code == 500
}

// 商品更新失败 - Internal Server Error
func ErrorGoodsUpdateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GOODS_UPDATE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 商品删除失败 - Internal Server Error
func IsGoodsDeleteFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GOODS_DELETE_FAILED.String() && e.Code == 500
}

// 商品删除失败 - Internal Server Error
func ErrorGoodsDeleteFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GOODS_DELETE_FAILED.String(), fmt.Sprintf(format, args...))
}

// ============ 品牌错误 ============
// 品牌不存在 - Not Found
func IsBrandNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BRAND_NOT_FOUND.String() && e.Code == 404
}

// ============ 品牌错误 ============
// 品牌不存在 - Not Found
func ErrorBrandNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_BRAND_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 品牌名称已存在 - Conflict
func IsBrandNameExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BRAND_NAME_EXISTS.String() && e.Code == 409
}

// 品牌名称已存在 - Conflict
func ErrorBrandNameExists(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_BRAND_NAME_EXISTS.String(), fmt.Sprintf(format, args...))
}

// 品牌名称不能为空 - Bad Request
func IsBrandNameEmpty(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BRAND_NAME_EMPTY.String() && e.Code == 400
}

// 品牌名称不能为空 - Bad Request
func ErrorBrandNameEmpty(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_BRAND_NAME_EMPTY.String(), fmt.Sprintf(format, args...))
}

// 品牌创建失败 - Internal Server Error
func IsBrandCreateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BRAND_CREATE_FAILED.String() && e.Code == 500
}

// 品牌创建失败 - Internal Server Error
func ErrorBrandCreateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_BRAND_CREATE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 品牌更新失败 - Internal Server Error
func IsBrandUpdateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BRAND_UPDATE_FAILED.String() && e.Code == 500
}

// 品牌更新失败 - Internal Server Error
func ErrorBrandUpdateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_BRAND_UPDATE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 品牌删除失败（有关联商品）- Conflict
func IsBrandDeleteFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BRAND_DELETE_FAILED.String() && e.Code == 409
}

// 品牌删除失败（有关联商品）- Conflict
func ErrorBrandDeleteFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_BRAND_DELETE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 品牌已删除 - Gone
func IsBrandDeleted(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BRAND_DELETED.String() && e.Code == 410
}

// 品牌已删除 - Gone
func ErrorBrandDeleted(format string, args ...interface{}) *errors.Error {
	return errors.New(410, ErrorReason_BRAND_DELETED.String(), fmt.Sprintf(format, args...))
}

// ============ 分类错误 ============
// 分类不存在 - Not Found
func IsCategoryNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_NOT_FOUND.String() && e.Code == 404
}

// ============ 分类错误 ============
// 分类不存在 - Not Found
func ErrorCategoryNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_CATEGORY_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 分类名称已存在 - Conflict
func IsCategoryNameExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_NAME_EXISTS.String() && e.Code == 409
}

// 分类名称已存在 - Conflict
func ErrorCategoryNameExists(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_CATEGORY_NAME_EXISTS.String(), fmt.Sprintf(format, args...))
}

// 分类名称不能为空 - Bad Request
func IsCategoryNameEmpty(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_NAME_EMPTY.String() && e.Code == 400
}

// 分类名称不能为空 - Bad Request
func ErrorCategoryNameEmpty(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CATEGORY_NAME_EMPTY.String(), fmt.Sprintf(format, args...))
}

// 分类层级错误 - Bad Request
func IsCategoryLevelInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_LEVEL_INVALID.String() && e.Code == 400
}

// 分类层级错误 - Bad Request
func ErrorCategoryLevelInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CATEGORY_LEVEL_INVALID.String(), fmt.Sprintf(format, args...))
}

// 父分类不存在 - Not Found
func IsParentCategoryNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PARENT_CATEGORY_NOT_FOUND.String() && e.Code == 404
}

// 父分类不存在 - Not Found
func ErrorParentCategoryNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_PARENT_CATEGORY_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 分类创建失败 - Internal Server Error
func IsCategoryCreateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_CREATE_FAILED.String() && e.Code == 500
}

// 分类创建失败 - Internal Server Error
func ErrorCategoryCreateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CATEGORY_CREATE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 分类更新失败 - Internal Server Error
func IsCategoryUpdateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_UPDATE_FAILED.String() && e.Code == 500
}

// 分类更新失败 - Internal Server Error
func ErrorCategoryUpdateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CATEGORY_UPDATE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 分类删除失败（有子分类）- Conflict
func IsCategoryHasChildren(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_HAS_CHILDREN.String() && e.Code == 409
}

// 分类删除失败（有子分类）- Conflict
func ErrorCategoryHasChildren(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_CATEGORY_HAS_CHILDREN.String(), fmt.Sprintf(format, args...))
}

// 分类删除失败（有关联商品）- Conflict
func IsCategoryHasGoods(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_HAS_GOODS.String() && e.Code == 409
}

// 分类删除失败（有关联商品）- Conflict
func ErrorCategoryHasGoods(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_CATEGORY_HAS_GOODS.String(), fmt.Sprintf(format, args...))
}

// 分类已删除 - Gone
func IsCategoryDeleted(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_DELETED.String() && e.Code == 410
}

// 分类已删除 - Gone
func ErrorCategoryDeleted(format string, args ...interface{}) *errors.Error {
	return errors.New(410, ErrorReason_CATEGORY_DELETED.String(), fmt.Sprintf(format, args...))
}

// 不能设置为自己的父分类 - Bad Request
func IsCategoryParentInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_PARENT_INVALID.String() && e.Code == 400
}

// 不能设置为自己的父分类 - Bad Request
func ErrorCategoryParentInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CATEGORY_PARENT_INVALID.String(), fmt.Sprintf(format, args...))
}

// ============ 轮播图错误 ============
// 轮播图不存在 - Not Found
func IsBannerNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BANNER_NOT_FOUND.String() && e.Code == 404
}

// ============ 轮播图错误 ============
// 轮播图不存在 - Not Found
func ErrorBannerNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_BANNER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 轮播图图片不能为空 - Bad Request
func IsBannerImageEmpty(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BANNER_IMAGE_EMPTY.String() && e.Code == 400
}

// 轮播图图片不能为空 - Bad Request
func ErrorBannerImageEmpty(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_BANNER_IMAGE_EMPTY.String(), fmt.Sprintf(format, args...))
}

// 轮播图链接不能为空 - Bad Request
func IsBannerUrlEmpty(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BANNER_URL_EMPTY.String() && e.Code == 400
}

// 轮播图链接不能为空 - Bad Request
func ErrorBannerUrlEmpty(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_BANNER_URL_EMPTY.String(), fmt.Sprintf(format, args...))
}

// 轮播图创建失败 - Internal Server Error
func IsBannerCreateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BANNER_CREATE_FAILED.String() && e.Code == 500
}

// 轮播图创建失败 - Internal Server Error
func ErrorBannerCreateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_BANNER_CREATE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 轮播图更新失败 - Internal Server Error
func IsBannerUpdateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BANNER_UPDATE_FAILED.String() && e.Code == 500
}

// 轮播图更新失败 - Internal Server Error
func ErrorBannerUpdateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_BANNER_UPDATE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 轮播图删除失败 - Internal Server Error
func IsBannerDeleteFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BANNER_DELETE_FAILED.String() && e.Code == 500
}

// 轮播图删除失败 - Internal Server Error
func ErrorBannerDeleteFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_BANNER_DELETE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 轮播图已删除 - Gone
func IsBannerDeleted(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BANNER_DELETED.String() && e.Code == 410
}

// 轮播图已删除 - Gone
func ErrorBannerDeleted(format string, args ...interface{}) *errors.Error {
	return errors.New(410, ErrorReason_BANNER_DELETED.String(), fmt.Sprintf(format, args...))
}

// 轮播图索引重复 - Conflict
func IsBannerIndexExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BANNER_INDEX_EXISTS.String() && e.Code == 409
}

// 轮播图索引重复 - Conflict
func ErrorBannerIndexExists(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_BANNER_INDEX_EXISTS.String(), fmt.Sprintf(format, args...))
}

// ============ 分类品牌关联错误 ============
// 分类品牌关联不存在 - Not Found
func IsCategoryBrandNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_BRAND_NOT_FOUND.String() && e.Code == 404
}

// ============ 分类品牌关联错误 ============
// 分类品牌关联不存在 - Not Found
func ErrorCategoryBrandNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_CATEGORY_BRAND_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 分类品牌关联已存在 - Conflict
func IsCategoryBrandExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_BRAND_EXISTS.String() && e.Code == 409
}

// 分类品牌关联已存在 - Conflict
func ErrorCategoryBrandExists(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_CATEGORY_BRAND_EXISTS.String(), fmt.Sprintf(format, args...))
}

// 分类品牌关联创建失败 - Internal Server Error
func IsCategoryBrandCreateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_BRAND_CREATE_FAILED.String() && e.Code == 500
}

// 分类品牌关联创建失败 - Internal Server Error
func ErrorCategoryBrandCreateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CATEGORY_BRAND_CREATE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 分类品牌关联删除失败 - Internal Server Error
func IsCategoryBrandDeleteFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_BRAND_DELETE_FAILED.String() && e.Code == 500
}

// 分类品牌关联删除失败 - Internal Server Error
func ErrorCategoryBrandDeleteFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CATEGORY_BRAND_DELETE_FAILED.String(), fmt.Sprintf(format, args...))
}
