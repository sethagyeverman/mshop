// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.21.11
// source: error_reason.proto

package errx

import (
	_ "github.com/go-kratos/kratos/v2/errors"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorReason int32

const (
	// ============ 通用错误 ============
	// 参数错误 - Bad Request
	ErrorReason_INVALID_PARAMS ErrorReason = 0
	// 数据库错误 - Internal Server Error
	ErrorReason_DATABASE_ERROR ErrorReason = 1
	// 记录未找到 - Not Found
	ErrorReason_RECORD_NOT_FOUND ErrorReason = 2
	// 内部服务错误 - Internal Server Error
	ErrorReason_INTERNAL_ERROR ErrorReason = 3
	// 权限不足 - Forbidden
	ErrorReason_PERMISSION_DENIED ErrorReason = 4
	// 未授权 - Unauthorized
	ErrorReason_UNAUTHORIZED ErrorReason = 5
	// ============ 商品错误 ============
	// 商品不存在 - Not Found
	ErrorReason_GOODS_NOT_FOUND ErrorReason = 10
	// 商品已下架 - Bad Request
	ErrorReason_GOODS_OFF_SALE ErrorReason = 11
	// 商品库存不足 - Bad Request
	ErrorReason_GOODS_STOCK_INSUFFICIENT ErrorReason = 12
	// 商品已删除 - Gone
	ErrorReason_GOODS_DELETED ErrorReason = 13
	// 商品编号已存在 - Conflict
	ErrorReason_GOODS_SN_EXISTS ErrorReason = 14
	// 商品名称不能为空 - Bad Request
	ErrorReason_GOODS_NAME_EMPTY ErrorReason = 15
	// 商品价格无效 - Bad Request
	ErrorReason_GOODS_PRICE_INVALID ErrorReason = 16
	// 商品创建失败 - Internal Server Error
	ErrorReason_GOODS_CREATE_FAILED ErrorReason = 17
	// 商品更新失败 - Internal Server Error
	ErrorReason_GOODS_UPDATE_FAILED ErrorReason = 18
	// 商品删除失败 - Internal Server Error
	ErrorReason_GOODS_DELETE_FAILED ErrorReason = 19
	// ============ 品牌错误 ============
	// 品牌不存在 - Not Found
	ErrorReason_BRAND_NOT_FOUND ErrorReason = 20
	// 品牌名称已存在 - Conflict
	ErrorReason_BRAND_NAME_EXISTS ErrorReason = 21
	// 品牌名称不能为空 - Bad Request
	ErrorReason_BRAND_NAME_EMPTY ErrorReason = 22
	// 品牌创建失败 - Internal Server Error
	ErrorReason_BRAND_CREATE_FAILED ErrorReason = 23
	// 品牌更新失败 - Internal Server Error
	ErrorReason_BRAND_UPDATE_FAILED ErrorReason = 24
	// 品牌删除失败（有关联商品）- Conflict
	ErrorReason_BRAND_DELETE_FAILED ErrorReason = 25
	// 品牌已删除 - Gone
	ErrorReason_BRAND_DELETED ErrorReason = 26
	// ============ 分类错误 ============
	// 分类不存在 - Not Found
	ErrorReason_CATEGORY_NOT_FOUND ErrorReason = 30
	// 分类名称已存在 - Conflict
	ErrorReason_CATEGORY_NAME_EXISTS ErrorReason = 31
	// 分类名称不能为空 - Bad Request
	ErrorReason_CATEGORY_NAME_EMPTY ErrorReason = 32
	// 分类层级错误 - Bad Request
	ErrorReason_CATEGORY_LEVEL_INVALID ErrorReason = 33
	// 父分类不存在 - Not Found
	ErrorReason_PARENT_CATEGORY_NOT_FOUND ErrorReason = 34
	// 分类创建失败 - Internal Server Error
	ErrorReason_CATEGORY_CREATE_FAILED ErrorReason = 35
	// 分类更新失败 - Internal Server Error
	ErrorReason_CATEGORY_UPDATE_FAILED ErrorReason = 36
	// 分类删除失败（有子分类）- Conflict
	ErrorReason_CATEGORY_HAS_CHILDREN ErrorReason = 37
	// 分类删除失败（有关联商品）- Conflict
	ErrorReason_CATEGORY_HAS_GOODS ErrorReason = 38
	// 分类已删除 - Gone
	ErrorReason_CATEGORY_DELETED ErrorReason = 39
	// 不能设置为自己的父分类 - Bad Request
	ErrorReason_CATEGORY_PARENT_INVALID ErrorReason = 40
	// ============ 轮播图错误 ============
	// 轮播图不存在 - Not Found
	ErrorReason_BANNER_NOT_FOUND ErrorReason = 50
	// 轮播图图片不能为空 - Bad Request
	ErrorReason_BANNER_IMAGE_EMPTY ErrorReason = 51
	// 轮播图链接不能为空 - Bad Request
	ErrorReason_BANNER_URL_EMPTY ErrorReason = 52
	// 轮播图创建失败 - Internal Server Error
	ErrorReason_BANNER_CREATE_FAILED ErrorReason = 53
	// 轮播图更新失败 - Internal Server Error
	ErrorReason_BANNER_UPDATE_FAILED ErrorReason = 54
	// 轮播图删除失败 - Internal Server Error
	ErrorReason_BANNER_DELETE_FAILED ErrorReason = 55
	// 轮播图已删除 - Gone
	ErrorReason_BANNER_DELETED ErrorReason = 56
	// 轮播图索引重复 - Conflict
	ErrorReason_BANNER_INDEX_EXISTS ErrorReason = 57
	// ============ 分类品牌关联错误 ============
	// 分类品牌关联不存在 - Not Found
	ErrorReason_CATEGORY_BRAND_NOT_FOUND ErrorReason = 60
	// 分类品牌关联已存在 - Conflict
	ErrorReason_CATEGORY_BRAND_EXISTS ErrorReason = 61
	// 分类品牌关联创建失败 - Internal Server Error
	ErrorReason_CATEGORY_BRAND_CREATE_FAILED ErrorReason = 62
	// 分类品牌关联删除失败 - Internal Server Error
	ErrorReason_CATEGORY_BRAND_DELETE_FAILED ErrorReason = 63
	// ============ 库存错误 ============
	// 库存不存在 - Not Found
	ErrorReason_INVENTORY_NOT_FOUND ErrorReason = 70
	// 库存不足 - Bad Request
	ErrorReason_INVENTORY_INSUFFICIENT ErrorReason = 71
	// 库存扣减失败 - Internal Server Error
	ErrorReason_INVENTORY_SELL_FAILED ErrorReason = 72
	// 库存归还失败 - Internal Server Error
	ErrorReason_INVENTORY_REBACK_FAILED ErrorReason = 73
	// 库存设置失败 - Internal Server Error
	ErrorReason_INVENTORY_SET_FAILED ErrorReason = 74
	// 订单号为空 - Bad Request
	ErrorReason_ORDER_SN_EMPTY ErrorReason = 75
	// 订单号已存在 - Conflict
	ErrorReason_ORDER_SN_EXISTS ErrorReason = 76
	// 商品ID无效 - Bad Request
	ErrorReason_GOODS_ID_INVALID ErrorReason = 77
	// 扣减数量无效 - Bad Request
	ErrorReason_INVENTORY_NUM_INVALID ErrorReason = 78
	// 库存已被锁定 - Conflict
	ErrorReason_INVENTORY_LOCKED ErrorReason = 79
	// 库存锁定失败 - Internal Server Error
	ErrorReason_INVENTORY_LOCK_FAILED ErrorReason = 80
	// 库存解锁失败 - Internal Server Error
	ErrorReason_INVENTORY_UNLOCK_FAILED ErrorReason = 81
	// 库存记录已存在 - Conflict
	ErrorReason_INVENTORY_ALREADY_EXISTS ErrorReason = 82
	// 批量操作失败 - Internal Server Error
	ErrorReason_INVENTORY_BATCH_FAILED ErrorReason = 83
	// 库存数据不一致 - Conflict
	ErrorReason_INVENTORY_DATA_INCONSISTENT ErrorReason = 84
	// 库存初始化失败 - Internal Server Error
	ErrorReason_INVENTORY_INIT_FAILED ErrorReason = 85
	// 库存同步失败 - Internal Server Error
	ErrorReason_INVENTORY_SYNC_FAILED ErrorReason = 86
	// 库存回滚失败 - Internal Server Error
	ErrorReason_INVENTORY_ROLLBACK_FAILED ErrorReason = 87
)

// Enum value maps for ErrorReason.
var (
	ErrorReason_name = map[int32]string{
		0:  "INVALID_PARAMS",
		1:  "DATABASE_ERROR",
		2:  "RECORD_NOT_FOUND",
		3:  "INTERNAL_ERROR",
		4:  "PERMISSION_DENIED",
		5:  "UNAUTHORIZED",
		10: "GOODS_NOT_FOUND",
		11: "GOODS_OFF_SALE",
		12: "GOODS_STOCK_INSUFFICIENT",
		13: "GOODS_DELETED",
		14: "GOODS_SN_EXISTS",
		15: "GOODS_NAME_EMPTY",
		16: "GOODS_PRICE_INVALID",
		17: "GOODS_CREATE_FAILED",
		18: "GOODS_UPDATE_FAILED",
		19: "GOODS_DELETE_FAILED",
		20: "BRAND_NOT_FOUND",
		21: "BRAND_NAME_EXISTS",
		22: "BRAND_NAME_EMPTY",
		23: "BRAND_CREATE_FAILED",
		24: "BRAND_UPDATE_FAILED",
		25: "BRAND_DELETE_FAILED",
		26: "BRAND_DELETED",
		30: "CATEGORY_NOT_FOUND",
		31: "CATEGORY_NAME_EXISTS",
		32: "CATEGORY_NAME_EMPTY",
		33: "CATEGORY_LEVEL_INVALID",
		34: "PARENT_CATEGORY_NOT_FOUND",
		35: "CATEGORY_CREATE_FAILED",
		36: "CATEGORY_UPDATE_FAILED",
		37: "CATEGORY_HAS_CHILDREN",
		38: "CATEGORY_HAS_GOODS",
		39: "CATEGORY_DELETED",
		40: "CATEGORY_PARENT_INVALID",
		50: "BANNER_NOT_FOUND",
		51: "BANNER_IMAGE_EMPTY",
		52: "BANNER_URL_EMPTY",
		53: "BANNER_CREATE_FAILED",
		54: "BANNER_UPDATE_FAILED",
		55: "BANNER_DELETE_FAILED",
		56: "BANNER_DELETED",
		57: "BANNER_INDEX_EXISTS",
		60: "CATEGORY_BRAND_NOT_FOUND",
		61: "CATEGORY_BRAND_EXISTS",
		62: "CATEGORY_BRAND_CREATE_FAILED",
		63: "CATEGORY_BRAND_DELETE_FAILED",
		70: "INVENTORY_NOT_FOUND",
		71: "INVENTORY_INSUFFICIENT",
		72: "INVENTORY_SELL_FAILED",
		73: "INVENTORY_REBACK_FAILED",
		74: "INVENTORY_SET_FAILED",
		75: "ORDER_SN_EMPTY",
		76: "ORDER_SN_EXISTS",
		77: "GOODS_ID_INVALID",
		78: "INVENTORY_NUM_INVALID",
		79: "INVENTORY_LOCKED",
		80: "INVENTORY_LOCK_FAILED",
		81: "INVENTORY_UNLOCK_FAILED",
		82: "INVENTORY_ALREADY_EXISTS",
		83: "INVENTORY_BATCH_FAILED",
		84: "INVENTORY_DATA_INCONSISTENT",
		85: "INVENTORY_INIT_FAILED",
		86: "INVENTORY_SYNC_FAILED",
		87: "INVENTORY_ROLLBACK_FAILED",
	}
	ErrorReason_value = map[string]int32{
		"INVALID_PARAMS":               0,
		"DATABASE_ERROR":               1,
		"RECORD_NOT_FOUND":             2,
		"INTERNAL_ERROR":               3,
		"PERMISSION_DENIED":            4,
		"UNAUTHORIZED":                 5,
		"GOODS_NOT_FOUND":              10,
		"GOODS_OFF_SALE":               11,
		"GOODS_STOCK_INSUFFICIENT":     12,
		"GOODS_DELETED":                13,
		"GOODS_SN_EXISTS":              14,
		"GOODS_NAME_EMPTY":             15,
		"GOODS_PRICE_INVALID":          16,
		"GOODS_CREATE_FAILED":          17,
		"GOODS_UPDATE_FAILED":          18,
		"GOODS_DELETE_FAILED":          19,
		"BRAND_NOT_FOUND":              20,
		"BRAND_NAME_EXISTS":            21,
		"BRAND_NAME_EMPTY":             22,
		"BRAND_CREATE_FAILED":          23,
		"BRAND_UPDATE_FAILED":          24,
		"BRAND_DELETE_FAILED":          25,
		"BRAND_DELETED":                26,
		"CATEGORY_NOT_FOUND":           30,
		"CATEGORY_NAME_EXISTS":         31,
		"CATEGORY_NAME_EMPTY":          32,
		"CATEGORY_LEVEL_INVALID":       33,
		"PARENT_CATEGORY_NOT_FOUND":    34,
		"CATEGORY_CREATE_FAILED":       35,
		"CATEGORY_UPDATE_FAILED":       36,
		"CATEGORY_HAS_CHILDREN":        37,
		"CATEGORY_HAS_GOODS":           38,
		"CATEGORY_DELETED":             39,
		"CATEGORY_PARENT_INVALID":      40,
		"BANNER_NOT_FOUND":             50,
		"BANNER_IMAGE_EMPTY":           51,
		"BANNER_URL_EMPTY":             52,
		"BANNER_CREATE_FAILED":         53,
		"BANNER_UPDATE_FAILED":         54,
		"BANNER_DELETE_FAILED":         55,
		"BANNER_DELETED":               56,
		"BANNER_INDEX_EXISTS":          57,
		"CATEGORY_BRAND_NOT_FOUND":     60,
		"CATEGORY_BRAND_EXISTS":        61,
		"CATEGORY_BRAND_CREATE_FAILED": 62,
		"CATEGORY_BRAND_DELETE_FAILED": 63,
		"INVENTORY_NOT_FOUND":          70,
		"INVENTORY_INSUFFICIENT":       71,
		"INVENTORY_SELL_FAILED":        72,
		"INVENTORY_REBACK_FAILED":      73,
		"INVENTORY_SET_FAILED":         74,
		"ORDER_SN_EMPTY":               75,
		"ORDER_SN_EXISTS":              76,
		"GOODS_ID_INVALID":             77,
		"INVENTORY_NUM_INVALID":        78,
		"INVENTORY_LOCKED":             79,
		"INVENTORY_LOCK_FAILED":        80,
		"INVENTORY_UNLOCK_FAILED":      81,
		"INVENTORY_ALREADY_EXISTS":     82,
		"INVENTORY_BATCH_FAILED":       83,
		"INVENTORY_DATA_INCONSISTENT":  84,
		"INVENTORY_INIT_FAILED":        85,
		"INVENTORY_SYNC_FAILED":        86,
		"INVENTORY_ROLLBACK_FAILED":    87,
	}
)

func (x ErrorReason) Enum() *ErrorReason {
	p := new(ErrorReason)
	*p = x
	return p
}

func (x ErrorReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorReason) Descriptor() protoreflect.EnumDescriptor {
	return file_error_reason_proto_enumTypes[0].Descriptor()
}

func (ErrorReason) Type() protoreflect.EnumType {
	return &file_error_reason_proto_enumTypes[0]
}

func (x ErrorReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorReason.Descriptor instead.
func (ErrorReason) EnumDescriptor() ([]byte, []int) {
	return file_error_reason_proto_rawDescGZIP(), []int{0}
}

var File_error_reason_proto protoreflect.FileDescriptor

const file_error_reason_proto_rawDesc = "" +
	"\n" +
	"\x12error_reason.proto\x12\x04errx\x1a\x13errors/errors.proto*\xd6\x0f\n" +
	"\vErrorReason\x12\x18\n" +
	"\x0eINVALID_PARAMS\x10\x00\x1a\x04\xa8E\x90\x03\x12\x18\n" +
	"\x0eDATABASE_ERROR\x10\x01\x1a\x04\xa8E\xf4\x03\x12\x1a\n" +
	"\x10RECORD_NOT_FOUND\x10\x02\x1a\x04\xa8E\x94\x03\x12\x18\n" +
	"\x0eINTERNAL_ERROR\x10\x03\x1a\x04\xa8E\xf4\x03\x12\x1b\n" +
	"\x11PERMISSION_DENIED\x10\x04\x1a\x04\xa8E\x93\x03\x12\x16\n" +
	"\fUNAUTHORIZED\x10\x05\x1a\x04\xa8E\x91\x03\x12\x19\n" +
	"\x0fGOODS_NOT_FOUND\x10\n" +
	"\x1a\x04\xa8E\x94\x03\x12\x18\n" +
	"\x0eGOODS_OFF_SALE\x10\v\x1a\x04\xa8E\x90\x03\x12\"\n" +
	"\x18GOODS_STOCK_INSUFFICIENT\x10\f\x1a\x04\xa8E\x90\x03\x12\x17\n" +
	"\rGOODS_DELETED\x10\r\x1a\x04\xa8E\x9a\x03\x12\x19\n" +
	"\x0fGOODS_SN_EXISTS\x10\x0e\x1a\x04\xa8E\x99\x03\x12\x1a\n" +
	"\x10GOODS_NAME_EMPTY\x10\x0f\x1a\x04\xa8E\x90\x03\x12\x1d\n" +
	"\x13GOODS_PRICE_INVALID\x10\x10\x1a\x04\xa8E\x90\x03\x12\x1d\n" +
	"\x13GOODS_CREATE_FAILED\x10\x11\x1a\x04\xa8E\xf4\x03\x12\x1d\n" +
	"\x13GOODS_UPDATE_FAILED\x10\x12\x1a\x04\xa8E\xf4\x03\x12\x1d\n" +
	"\x13GOODS_DELETE_FAILED\x10\x13\x1a\x04\xa8E\xf4\x03\x12\x19\n" +
	"\x0fBRAND_NOT_FOUND\x10\x14\x1a\x04\xa8E\x94\x03\x12\x1b\n" +
	"\x11BRAND_NAME_EXISTS\x10\x15\x1a\x04\xa8E\x99\x03\x12\x1a\n" +
	"\x10BRAND_NAME_EMPTY\x10\x16\x1a\x04\xa8E\x90\x03\x12\x1d\n" +
	"\x13BRAND_CREATE_FAILED\x10\x17\x1a\x04\xa8E\xf4\x03\x12\x1d\n" +
	"\x13BRAND_UPDATE_FAILED\x10\x18\x1a\x04\xa8E\xf4\x03\x12\x1d\n" +
	"\x13BRAND_DELETE_FAILED\x10\x19\x1a\x04\xa8E\x99\x03\x12\x17\n" +
	"\rBRAND_DELETED\x10\x1a\x1a\x04\xa8E\x9a\x03\x12\x1c\n" +
	"\x12CATEGORY_NOT_FOUND\x10\x1e\x1a\x04\xa8E\x94\x03\x12\x1e\n" +
	"\x14CATEGORY_NAME_EXISTS\x10\x1f\x1a\x04\xa8E\x99\x03\x12\x1d\n" +
	"\x13CATEGORY_NAME_EMPTY\x10 \x1a\x04\xa8E\x90\x03\x12 \n" +
	"\x16CATEGORY_LEVEL_INVALID\x10!\x1a\x04\xa8E\x90\x03\x12#\n" +
	"\x19PARENT_CATEGORY_NOT_FOUND\x10\"\x1a\x04\xa8E\x94\x03\x12 \n" +
	"\x16CATEGORY_CREATE_FAILED\x10#\x1a\x04\xa8E\xf4\x03\x12 \n" +
	"\x16CATEGORY_UPDATE_FAILED\x10$\x1a\x04\xa8E\xf4\x03\x12\x1f\n" +
	"\x15CATEGORY_HAS_CHILDREN\x10%\x1a\x04\xa8E\x99\x03\x12\x1c\n" +
	"\x12CATEGORY_HAS_GOODS\x10&\x1a\x04\xa8E\x99\x03\x12\x1a\n" +
	"\x10CATEGORY_DELETED\x10'\x1a\x04\xa8E\x9a\x03\x12!\n" +
	"\x17CATEGORY_PARENT_INVALID\x10(\x1a\x04\xa8E\x90\x03\x12\x1a\n" +
	"\x10BANNER_NOT_FOUND\x102\x1a\x04\xa8E\x94\x03\x12\x1c\n" +
	"\x12BANNER_IMAGE_EMPTY\x103\x1a\x04\xa8E\x90\x03\x12\x1a\n" +
	"\x10BANNER_URL_EMPTY\x104\x1a\x04\xa8E\x90\x03\x12\x1e\n" +
	"\x14BANNER_CREATE_FAILED\x105\x1a\x04\xa8E\xf4\x03\x12\x1e\n" +
	"\x14BANNER_UPDATE_FAILED\x106\x1a\x04\xa8E\xf4\x03\x12\x1e\n" +
	"\x14BANNER_DELETE_FAILED\x107\x1a\x04\xa8E\xf4\x03\x12\x18\n" +
	"\x0eBANNER_DELETED\x108\x1a\x04\xa8E\x9a\x03\x12\x1d\n" +
	"\x13BANNER_INDEX_EXISTS\x109\x1a\x04\xa8E\x99\x03\x12\"\n" +
	"\x18CATEGORY_BRAND_NOT_FOUND\x10<\x1a\x04\xa8E\x94\x03\x12\x1f\n" +
	"\x15CATEGORY_BRAND_EXISTS\x10=\x1a\x04\xa8E\x99\x03\x12&\n" +
	"\x1cCATEGORY_BRAND_CREATE_FAILED\x10>\x1a\x04\xa8E\xf4\x03\x12&\n" +
	"\x1cCATEGORY_BRAND_DELETE_FAILED\x10?\x1a\x04\xa8E\xf4\x03\x12\x1d\n" +
	"\x13INVENTORY_NOT_FOUND\x10F\x1a\x04\xa8E\x94\x03\x12 \n" +
	"\x16INVENTORY_INSUFFICIENT\x10G\x1a\x04\xa8E\x90\x03\x12\x1f\n" +
	"\x15INVENTORY_SELL_FAILED\x10H\x1a\x04\xa8E\xf4\x03\x12!\n" +
	"\x17INVENTORY_REBACK_FAILED\x10I\x1a\x04\xa8E\xf4\x03\x12\x1e\n" +
	"\x14INVENTORY_SET_FAILED\x10J\x1a\x04\xa8E\xf4\x03\x12\x18\n" +
	"\x0eORDER_SN_EMPTY\x10K\x1a\x04\xa8E\x90\x03\x12\x19\n" +
	"\x0fORDER_SN_EXISTS\x10L\x1a\x04\xa8E\x99\x03\x12\x1a\n" +
	"\x10GOODS_ID_INVALID\x10M\x1a\x04\xa8E\x90\x03\x12\x1f\n" +
	"\x15INVENTORY_NUM_INVALID\x10N\x1a\x04\xa8E\x90\x03\x12\x1a\n" +
	"\x10INVENTORY_LOCKED\x10O\x1a\x04\xa8E\x99\x03\x12\x1f\n" +
	"\x15INVENTORY_LOCK_FAILED\x10P\x1a\x04\xa8E\xf4\x03\x12!\n" +
	"\x17INVENTORY_UNLOCK_FAILED\x10Q\x1a\x04\xa8E\xf4\x03\x12\"\n" +
	"\x18INVENTORY_ALREADY_EXISTS\x10R\x1a\x04\xa8E\x99\x03\x12 \n" +
	"\x16INVENTORY_BATCH_FAILED\x10S\x1a\x04\xa8E\xf4\x03\x12%\n" +
	"\x1bINVENTORY_DATA_INCONSISTENT\x10T\x1a\x04\xa8E\x99\x03\x12\x1f\n" +
	"\x15INVENTORY_INIT_FAILED\x10U\x1a\x04\xa8E\xf4\x03\x12\x1f\n" +
	"\x15INVENTORY_SYNC_FAILED\x10V\x1a\x04\xa8E\xf4\x03\x12#\n" +
	"\x19INVENTORY_ROLLBACK_FAILED\x10W\x1a\x04\xa8E\xf4\x03\x1a\x04\xa0E\xf4\x03B.\n" +
	"\x0ecom.mshop.errxP\x01Z\x13mshop/pkg/errx;errx\xa2\x02\x04ERRXb\x06proto3"

var (
	file_error_reason_proto_rawDescOnce sync.Once
	file_error_reason_proto_rawDescData []byte
)

func file_error_reason_proto_rawDescGZIP() []byte {
	file_error_reason_proto_rawDescOnce.Do(func() {
		file_error_reason_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_error_reason_proto_rawDesc), len(file_error_reason_proto_rawDesc)))
	})
	return file_error_reason_proto_rawDescData
}

var file_error_reason_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_error_reason_proto_goTypes = []any{
	(ErrorReason)(0), // 0: errx.ErrorReason
}
var file_error_reason_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_error_reason_proto_init() }
func file_error_reason_proto_init() {
	if File_error_reason_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_error_reason_proto_rawDesc), len(file_error_reason_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_error_reason_proto_goTypes,
		DependencyIndexes: file_error_reason_proto_depIdxs,
		EnumInfos:         file_error_reason_proto_enumTypes,
	}.Build()
	File_error_reason_proto = out.File
	file_error_reason_proto_goTypes = nil
	file_error_reason_proto_depIdxs = nil
}
